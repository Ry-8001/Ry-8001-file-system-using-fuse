/*
 * ROFS - The read-only filesystem for FUSE.
 * Copyright 2005,2006,2008 Matthew Keller. kellermg@potsdam.edu and others.
 * v2008.09.24
 *
 * Mount any filesytem, or folder tree read-only, anywhere else.
 * No warranties. No guarantees. No lawyers.
 *
 * I read (and borrowed) a lot of other FUSE code to write this.
 * Similarities possibly exist- Wholesale reuse as well of other GPL code.
 * Special mention to Rémi Flament and his loggedfs.
 *
 * Consider this code GPLv2.
 *
 * Compile: gcc rofs.c -o rofs -Wall -ansi -W -std=c99 -g -ggdb -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -lfuse 
 * Mount: rofs readwrite_filesystem mount_point
 *
 */

 /*
 150190708 Ramazan Yetişmiş
 150180058 Faruk Orak
 */


#define FUSE_USE_VERSION 26
#define SIZE_ARR 25

static const char* rofsVersion = "2008.09.24";

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/statvfs.h>
#include <stdio.h>
#include <strings.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/xattr.h>
#include <dirent.h>
#include <unistd.h>
#include <fuse.h>
#include <magic.h>


// Global to store our read-write path
char *rw_path;

// Translate an rofs path into it's underlying filesystem path
static char* translate_path(const char* path)
{

    char *rPath= (char*)malloc(sizeof(char)*(strlen(path)+strlen(rw_path)+1));

    strcpy(rPath,rw_path);
    if (rPath[strlen(rPath)-1]=='/') {
        rPath[strlen(rPath)-1]='\0';
    }
    strcat(rPath,path);

    return rPath;
}
/*****************************
OUR FUNCTIONS
*****************************/
/*static int isInFolder(const char* path)
{
    int result = 0, i = 0;
    for(;path[i] != '\0'; i++)
    {
        if(path[i] == '/')
        {
            result++;
        }
    }
    return (result > 1);
}*/

static char* magic_path(const char* path)
{

    char *rPath= (char*)malloc(sizeof(char)*(strlen(path)+strlen(rw_path)+2));

    strcpy(rPath,rw_path);
    strcat(rPath,"/");
    strcat(rPath,path);
    rPath[strlen(rPath)] = '\0';
    return rPath;
}

static int isFolder(const char* path)
{
    int i = 0;
    for(;path[i] != '\0'; i++)
    {
        if(path[i] == '.')
        {
            return 0;
        }
    }
    return 1;
}

static int contains(char** arr, char* key)
{
    int i = 0;
    for(;i < SIZE_ARR; i++)
    {
        if(arr[i] != NULL)
        {
            if(strcmp(arr[i],key) == 0)
            {
                return 1;
            }
        }
    }
    return 0;
}

static void format_str(char * path)
{
    int i = 0;
    for(;path[i] != '\0'; i++)
    {
        if(path[i] >= 'a' && path[i] <= 'z')
        {
            path[i] -= 32;
        }
        else if((path[i] >= 'A' && path[i] <= 'Z') || (path[i] >= '1' && path[i] <= '9'));
        else
        {
            path[i] = '-';
        }
    }
}

static void add_ext(char** arr, char* ext)
{
    int i = 0;
    for(;arr[i] != NULL && i < SIZE_ARR ;i++);
    arr[i] = (char*)malloc(sizeof(char)*strlen(ext) + 1);
    strcpy(arr[i],ext);
}

/*static char * get_path(char* file, char* folder)
{
    char * result = (char*)malloc(sizeof(char)*(strlen(file)+strlen(folder)+3));
    char * inner = (char*)malloc(sizeof(char)*(strlen(file)+strlen(folder)+2));
    strcpy(inner,folder);
    strcat(inner,"/");
    strcat(inner,file);
    if (inner[strlen(inner)-1]=='/') {
        inner[strlen(inner)-1]='\0';
    }
    strcpy(result+1,inner);
    result[0] = '/';
    if (result[strlen(result)-1]=='/') {
        result[strlen(result)-1]='\0';
    }

    free(inner);
    return result;
}*/

static char* find_folder_name(const char* path)
{
    int i = 0, j = 0;
    char *ext;
    for(;path[i] != ';' && path[i] != '\0';i++);
    ext = malloc(sizeof(char)*(i+1));
    for(;j < i; j++)
    {
        ext[j] = path[j];
    }
    ext[j] = '\0';
    return ext;
}

static char* get_name(const char* path)
{
    int i = strlen(path)-1;
    for(;path[i] != '/' && i != 0;i--);
    char * result = (char*)malloc(sizeof(char)*(strlen(path)-i+1));
    strcpy(result,path+i);
    result[strlen(result)] = '\0';
    return result;
}
/******************************
*
* Callbacks for FUSE
*
*
*
******************************/

static int rofs_getattr(const char *path, struct stat *st_data)
{
    int res;
    
	
    if (isFolder(path) && strcmp(path,"/") != 0) {
        st_data->st_mode = S_IFDIR | 0755;
        st_data->st_nlink = 2;
    }
    else
    {   
        char *npath = get_name(path);
        char *upath=translate_path(npath);

        res = lstat(upath, st_data);
        free(upath);
        free(npath);
    }
    
    if(res == -1) {
        return -errno;
    }
    return 0;
}

static int rofs_readlink(const char *path, char *buf, size_t size)
{
    int res;
    char *npath = get_name(path);
    char *upath=translate_path(npath);

    res = readlink(upath, buf, size - 1);
    free(upath);
    free(npath);
    if(res == -1) {
        return -errno;
    }
    buf[res] = '\0';
    return 0;
}

static int rofs_readdir(const char *path, void *buf, fuse_fill_dir_t filler,off_t offset, struct fuse_file_info *fi)
{
    DIR *dp;
    struct dirent *de;
    int res,i;

    (void) offset;
    (void) fi;

    char **my_folders = malloc(sizeof(char*)*SIZE_ARR);
    for(i = 0; i < SIZE_ARR; i++) my_folders[i] = NULL;

	struct magic_set *magic = magic_open(MAGIC_MIME|MAGIC_CHECK);
    magic_load(magic,NULL);
    
	
    if(strcmp(path,"/") == 0)
    {
		char *upath=translate_path(path);
    	dp = opendir(upath);
    	free(upath);
    	if(dp == NULL) {
        	res = -errno;
        	return res;
    	}
        while((de = readdir(dp)) != NULL) {
            struct stat st;
            memset(&st, 0, sizeof(st));
            st.st_ino = de->d_ino;
            st.st_mode = de->d_type << 12;
            char *inner = magic_path(de->d_name);
            char *ext = find_folder_name(magic_file(magic,inner));
            format_str(ext);
            free(inner);
            if(contains(my_folders,ext) == 0 && (strcmp(de->d_name,".") != 0 && strcmp(de->d_name,"..") != 0))
            {
                add_ext(my_folders,ext);
            }
            else if((strcmp(de->d_name,".") == 0 || strcmp(de->d_name,"..") == 0))
            {
                if(filler(buf,de->d_name , &st, 0)) break;
            }
            free(ext);
        }
        for(i = 0; my_folders[i] != NULL && i < SIZE_ARR; i++)
        {
            if(filler(buf, my_folders[i], NULL, 0)) break;
        }
       
    }
    else
    {
		
		filler(buf,".",NULL,0);
       	filler(buf,"..",NULL,0);
		char *upath=translate_path("/");
    	dp = opendir(upath);
        while((de = readdir(dp)) != NULL) {
            struct stat st;
            memset(&st, 0, sizeof(st));
            st.st_ino = de->d_ino;
            st.st_mode = de->d_type << 12;
            if((strcmp(de->d_name,".") == 0 || strcmp(de->d_name,"..") == 0)) continue;
            char *inner = magic_path(de->d_name);
            char *ext = find_folder_name(magic_file(magic,inner));;
            format_str(ext);
			if(strcmp(path+1,ext)==0)
			{
                
				if(filler(buf,de->d_name , &st, 0)) break;
			}
            free(ext);
            free(inner);
        }
        free(upath);
    }

    for(i = 0; i < SIZE_ARR; i++)
    {
        if(my_folders[i] != NULL)
        {
            free(my_folders[i]);
        }
    }
    free(my_folders);

    closedir(dp);
    return 0;
}

static int rofs_mknod(const char *path, mode_t mode, dev_t rdev)
{
    (void)path;
    (void)mode;
    (void)rdev;
    return -EROFS;
}

static int rofs_mkdir(const char *path, mode_t mode)
{
    (void)path;
    (void)mode;
    return -EROFS;
}

static int rofs_unlink(const char *path)
{
    int res;

    char * npath = get_name(path);
    char * upath = translate_path(npath);
    res = unlink(upath);
    free(upath);
    free(npath);
    if (res == -1)
        return -errno;

    return 0;
}

static int rofs_rmdir(const char *path)
{
    (void)path;
    return -EROFS;
}

static int rofs_symlink(const char *from, const char *to)
{
    (void)from;
    (void)to;
    return -EROFS;
}

static int rofs_rename(const char *from, const char *to)
{
    (void)from;
    (void)to;
    return -EROFS;
}

static int rofs_link(const char *from, const char *to)
{
    (void)from;
    (void)to;
    return -EROFS;
}

static int rofs_chmod(const char *path, mode_t mode)
{
    (void)path;
    (void)mode;
    return -EROFS;

}

static int rofs_chown(const char *path, uid_t uid, gid_t gid)
{
    (void)path;
    (void)uid;
    (void)gid;
    return -EROFS;
}

static int rofs_truncate(const char *path, off_t size)
{
    (void)path;
    (void)size;
    return -EROFS;
}

static int rofs_utime(const char *path, struct utimbuf *buf)
{
    (void)path;
    (void)buf;
    return -EROFS;
}

static int rofs_open(const char *path, struct fuse_file_info *finfo)
{
    int res;

    /* We allow opens, unless they're tring to write, sneaky
     * people.
     */
    int flags = finfo->flags;

    if ((flags & O_WRONLY) || (flags & O_RDWR) || (flags & O_CREAT) || (flags & O_EXCL) || (flags & O_TRUNC) || (flags & O_APPEND)) {
        return -EROFS;
    }

    char *npath = get_name(path);
    char *upath=translate_path(npath);

    res = open(upath, flags);

    free(upath);
    free(npath);
    if(res == -1) {
        return -errno;
    }
    close(res);
    return 0;
}

static int rofs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *finfo)
{
    int fd;
    int res;
    (void)finfo;

    char *npath = get_name(path);
    char *upath=translate_path(npath);
    fd = open(upath, O_RDONLY);
    free(upath);
    free(npath);
    if(fd == -1) {
        res = -errno;
        return res;
    }
    res = pread(fd, buf, size, offset);

    if(res == -1) {
        res = -errno;
    }
    close(fd);
    return res;
}

static int rofs_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *finfo)
{
    (void)path;
    (void)buf;
    (void)size;
    (void)offset;
    (void)finfo;
    return -EROFS;
}

static int rofs_statfs(const char *path, struct statvfs *st_buf)
{
    int res;
    char *npath = get_name(path);
    char *upath=translate_path(npath);

    res = statvfs(upath, st_buf);
    free(upath);
    free(npath);
    if (res == -1) {
        return -errno;
    }
    return 0;
}

static int rofs_release(const char *path, struct fuse_file_info *finfo)
{
    (void) path;
    (void) finfo;
    return 0;
}

static int rofs_fsync(const char *path, int crap, struct fuse_file_info *finfo)
{
    (void) path;
    (void) crap;
    (void) finfo;
    return 0;
}

static int rofs_access(const char *path, int mode)
{
    int res;
    char *npath = get_name(path);
    char *upath=translate_path(npath);

    /* Don't pretend that we allow writing
     * Chris AtLee <chris@atlee.ca>
     */

    res = access(upath, mode);
    free(upath);
    free(npath);
    if (res == -1) {
        return -errno;
    }
    return res;
}

/*
 * Set the value of an extended attribute
 */
static int rofs_setxattr(const char *path, const char *name, const char *value, size_t size, int flags)
{
    (void)path;
    (void)name;
    (void)value;
    (void)size;
    (void)flags;
    return -EROFS;
}

/*
 * Get the value of an extended attribute.
 */
static int rofs_getxattr(const char *path, const char *name, char *value, size_t size)
{
    int res;

    char *npath = get_name(path);
    char *upath=translate_path(npath);
   
    res = lgetxattr(upath, name, value, size);
    

    free(upath);
    free(npath);
    if(res == -1) {
     //   return -errno;
    }
    return 1;
}

/*
 * List the supported extended attributes.
 */
static int rofs_listxattr(const char *path, char *list, size_t size)
{
    int res;

    char *npath = get_name(path);
    char *upath=translate_path(npath);
    res = llistxattr(upath, list, size);
    free(upath);
    free(npath);
    if(res == -1) {
        return -errno;
    }
    return res;

}

/*
 * Remove an extended attribute.
 */
static int rofs_removexattr(const char *path, const char *name)
{
    (void)path;
    (void)name;
    return -EROFS;

}

struct fuse_operations rofs_oper = {
    .getattr     = rofs_getattr,
    .readlink    = rofs_readlink,
    .readdir     = rofs_readdir,
    .mknod       = rofs_mknod,
    .mkdir       = rofs_mkdir,
    .symlink     = rofs_symlink,
    .unlink      = rofs_unlink,
    .rmdir       = rofs_rmdir,
    .rename      = rofs_rename,
    .link        = rofs_link,
    .chmod       = rofs_chmod,
    .chown       = rofs_chown,
    .truncate    = rofs_truncate,
    .utime       = rofs_utime,
    .open        = rofs_open,
    .read        = rofs_read,
    .write       = rofs_write,
    .statfs      = rofs_statfs,
    .release     = rofs_release,
    .fsync       = rofs_fsync,
    .access      = rofs_access,

    /* Extended attributes support for userland interaction */
    .setxattr    = rofs_setxattr,
    .getxattr    = rofs_getxattr,
    .listxattr   = rofs_listxattr,
    .removexattr = rofs_removexattr
};
enum {
    KEY_HELP,
    KEY_VERSION,
};

static void usage(const char* progname)
{
    fprintf(stdout,
            "usage: %s readwritepath mountpoint [options]\n"
            "\n"
            "   Mounts readwritepath as a read-only mount at mountpoint\n"
            "\n"
            "general options:\n"
            "   -o opt,[opt...]     mount options\n"
            "   -h  --help          print help\n"
            "   -V  --version       print version\n"
            "\n", progname);
}

static int rofs_parse_opt(void *data, const char *arg, int key,
                          struct fuse_args *outargs)
{
    (void) data;

    switch (key)
    {
    case FUSE_OPT_KEY_NONOPT:
        if (rw_path == 0)
        {
            rw_path = strdup(arg);
            return 0;
        }
        else
        {
            return 1;
        }
    case FUSE_OPT_KEY_OPT:
        return 1;
    case KEY_HELP:
        usage(outargs->argv[0]);
        exit(0);
    case KEY_VERSION:
        fprintf(stdout, "ROFS version %s\n", rofsVersion);
        exit(0);
    default:
        fprintf(stderr, "see `%s -h' for usage\n", outargs->argv[0]);
        exit(1);
    }
    return 1;
}

static struct fuse_opt rofs_opts[] = {
    FUSE_OPT_KEY("-h",          KEY_HELP),
    FUSE_OPT_KEY("--help",      KEY_HELP),
    FUSE_OPT_KEY("-V",          KEY_VERSION),
    FUSE_OPT_KEY("--version",   KEY_VERSION),
    FUSE_OPT_END
};

int main(int argc, char *argv[])
{
    struct fuse_args args = FUSE_ARGS_INIT(argc, argv);
    int res;

    res = fuse_opt_parse(&args, &rw_path, rofs_opts, rofs_parse_opt);
    if (res != 0)
    {
        fprintf(stderr, "Invalid arguments\n");
        fprintf(stderr, "see `%s -h' for usage\n", argv[0]);
        exit(1);
    }
    if (rw_path == 0)
    {
        fprintf(stderr, "Missing readwritepath\n");
        fprintf(stderr, "see `%s -h' for usage\n", argv[0]);
        exit(1);
    }

    fuse_main(args.argc, args.argv, &rofs_oper, NULL);

    return 0;
}
